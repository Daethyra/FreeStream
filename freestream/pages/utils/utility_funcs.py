import os
import sys
import logging
import tempfile
import torch
import streamlit as st
from langchain_community.document_loaders import UnstructuredFileLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
from langchain_core.callbacks.base import BaseCallbackHandler

# Set up logging
logging.basicConfig(level=logging.WARNING, stream=sys.stdout)
logger = logging.getLogger(__name__)


@st.cache_resource(ttl="1h")  # Cache the resource
def configure_retriever(uploaded_files):
    """
    This function configures and returns a retriever object for a given list of uploaded files.

    The function performs the following steps:
    1. Reads the documents from the uploaded files.
    2. Splits the documents into smaller chunks.
    3. Creates embeddings for each chunk using the HuggingFace's MiniLM model.
    4. Stores the embeddings in a FAISS vector database.
    5. Defines a retriever object that uses the FAISS vector database to search for similar documents.

    Args:
        uploaded_files (list): A list of Streamlit uploaded file objects.

    Returns:
        retriever (Retriever): A retriever object that can be used to search for similar documents.
    """
    # Read documents
    docs = []
    temp_dir = tempfile.TemporaryDirectory()
    for file in uploaded_files:
        temp_filepath = os.path.join(temp_dir.name, file.name)
        with open(temp_filepath, "wb") as f:
            f.write(file.getvalue())
        loader = UnstructuredFileLoader(temp_filepath)
        docs.extend(loader.load())
        logger.info("Loaded document: %s", file.name)

    # Split documents
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=800, chunk_overlap=75)
    chunks = text_splitter.split_documents(docs)

    # Create embeddings and store in vectordb
    # quickly create a GPU detection line for model_kwargs
    model_kwargs = {"device": "cuda" if torch.cuda.is_available() else "cpu"}
    embeddings = HuggingFaceEmbeddings(
        model_name="all-MiniLM-L6-v2", model_kwargs=model_kwargs
    )
    vectordb = FAISS.from_documents(chunks, embeddings)

    # Define retriever
    retriever = vectordb.as_retriever(
        search_type="mmr", search_kwargs={"k": 3, "fetch_k": 7}
    )

    return retriever


class StreamHandler(BaseCallbackHandler):
    """
    A callback handler for streaming the model's output to the user interface.

    This handler updates the user interface with the model's token by token. It also ignores the rephrased question    as output by using a run ID.

    Attributes:
        container (DeltaGenerator): The delta generator object for updating the user interface.
        text (str): The text that has been generated by the model.
        run_id_ignore_token (str): The run ID for ignoring the rephrased question as output.
    """

    def __init__(
        self, container: st.delta_generator.DeltaGenerator, initial_text: str = ""
    ):
        """
        Initialize the StreamHandler object.

        Args:
            container (DeltaGenerator): The delta generator object for updating the user interface.
            initial_text (str): The initial text for the user interface.
        """
        self.container = container
        self.text = initial_text
        self.run_id_ignore_token = None

    def on_llm_start(self, serialized: dict, prompts: list, **kwargs):
        """
        Called when the language model starts generating a response.

        This method sets the run ID for ignoring the rephrased question as output.

        Args:
            serialized (dict): The serialized data for the language model.
            prompts (list): The list of prompts for the language model.
            kwargs: Additional keyword arguments.
        """
        # Workaround to prevent showing the rephrased question as output
        if prompts[0].startswith("Human"):
            self.run_id_ignore_token = kwargs.get("run_id")

    def on_llm_new_token(self, token: str, **kwargs) -> None:
        """
        Called when the language model generates a new token.

        This method updates the user interface with the new token and appends it to the text.

        Args:
            token (str): The new token generated by the language model.
            kwargs: Additional keyword arguments.
        """
        if self.run_id_ignore_token == kwargs.get("run_id", False):
            return
        self.text += token
        self.container.markdown(self.text)


class PrintRetrievalHandler(BaseCallbackHandler):
    """
    A callback handler for printing the context retrieval status.

    This handler updates the status of the retrieval process, including the question, document sources,
    and page contents. It also changes the status label and state according to the retrieval process.

    Attributes:
        container (Container): The container object that contains the status object.
        status (Status): The status object for updating the retrieval process status.
    """

    def __init__(self, container):
        """
        Initialize the PrintRetrievalHandler object.

        Args:
            container (Container): The container object that contains the status object.
        """
        self.status = container.status("**Context Retrieval**")

    def on_retriever_start(self, serialized: dict, query: str, **kwargs):
        """
        Called when the retriever starts the retrieval process.

        This method writes the question to the status and updates the label of the status.

        Args:
            serialized (dict): The serialized data for the retrieval process.
            query (str): The question for which the context is being retrieved.
            kwargs: Additional keyword arguments.
        """
        self.status.write(f"**Question:** {query}")
        self.status.update(label=f"**Context Retrieval:** {query}")

    def on_retriever_end(self, documents, **kwargs):
        """
        Called when the retriever finishes the retrieval process.

        This method prints the document sources and page contents to the status and updates the state of the status.

        Args:
            documents (list): The list of documents retrieved for the question.
            kwargs: Additional keyword arguments.
        """
        for idx, doc in enumerate(documents):
            source = os.path.basename(doc.metadata["source"])
            self.status.write(f"**Document {idx} from {source}**")
            self.status.markdown(doc.page_content)
        self.status.update(state="complete")


# Define a callback function for when a model is selected
def set_llm(selected_model: str, model_names: dict):
    """
    Updates the large language model (LLM) in the session state based on the user's selection.
    Also, displays an alert based on the selected model.

    Parameters:
    - None

    Returns:
    - None

    This function has the following side effects:
    1. It updates the `llm` key in the `st.session_state` dictionary with the selected model.
    2. It displays a warning message when the user switches to the "ChatOpenAI GPT-3.5 Turbo" model.
    3. It displays a failure warning message when the user fails to change the model (e.g., due to unsupported models).
    """
    try:
        # Set the model in session state
        st.session_state.llm = model_names[selected_model]
        
        # Show an alert based on what model was selected
        if selected_model == "GPT-3.5 Turbo":
            st.success(body="Switched to GPT-3.5 Turbo!", icon="⚠️")
        elif selected_model == "Gemini-Pro":
            st.success(body="Switched to Gemini-Pro!", icon="⚠️")

        # Add more if statements for each added model
        # if st.session_state.model_selector == model_names["GPT-4"]:
        #     ...

        else:
            # This should not happen if all models are covered above
            raise ValueError(f"Unsupported model selected: {selected_model}")
    except Exception as e:
        # Log the detailed error message
        logging.error(f"Error changing model: {e}")
        # Display a more informative error message to the user
        st.error(f"Failed to change model! Error: {e}")